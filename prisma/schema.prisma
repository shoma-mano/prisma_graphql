datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated/prisma-nestjs-graphql"
  noAtomicOperations = true
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

model Store {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  latitude  Int
  longitude Int
  name      String
  img       String?
  menus     StoresOnMenus[]
}

model StoresOnMenus {
  store    Store   @relation(fields: [storeId], references: [id])
  storeId  Int
  menu     Menu    @relation(fields: [menuId], references: [id])
  menuId   Int
  isActive Boolean

  @@id([storeId, menuId])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  ///苗字
  lastname  String?
  role      Role
}

enum Role {
  ADMIN
  USER
}

///商品詳細ページ
model Detail {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  img       String
  price     Int
  sentence  String
  menu      Menu?
  options   DetailOnOption[]
}

model Menu {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  name      String
  img       String
  detail    Detail?         @relation(fields: [detailId], references: [id])
  ///商品詳細ページ
  detailId  Int?            @unique
  category  String
  stores    StoresOnMenus[]
}

model Option {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  details   DetailOnOption[]
}

model DetailOnOption {
  option     Option   @relation(fields: [optionId], references: [id])
  optionId   Int
  detail     Detail   @relation(fields: [detailId], references: [id])
  detailId   Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([optionId, detailId])
}
